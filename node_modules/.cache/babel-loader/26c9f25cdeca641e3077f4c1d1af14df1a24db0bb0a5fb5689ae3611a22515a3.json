{"ast":null,"code":"var _jsxFileName = \"/Users/sunil/Desktop/mdev-dashboard/src/components/quotes.widget.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles/quotes.css'; // Include your CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RandomQuotes = () => {\n  _s();\n  const [quote, setQuote] = useState('');\n  const [author, setAuthor] = useState('');\n  const [error, setError] = useState('');\n  const fetchRandomQuote = async () => {\n    try {\n      const response = await fetch('https://api.quotable.io/random'); //calling API\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setQuote(data.content); //setting data\n      setAuthor(data.author);\n    } catch (error) {\n      setError('Failed to fetch quote.');\n    }\n  };\n  useEffect(() => {\n    fetchRandomQuote();\n  }, []);\n\n  //fetching when page loads using useEffect\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quotes\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Random Quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 23\n    }, this), quote && /*#__PURE__*/_jsxDEV(\"blockquote\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\\"\", quote, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        children: [\"- \", author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(RandomQuotes, \"FMSQwoTXGf52Ek0OlMdN29yCE4E=\");\n_c = RandomQuotes;\nexport default RandomQuotes;\nvar _c;\n$RefreshReg$(_c, \"RandomQuotes\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","RandomQuotes","_s","quote","setQuote","author","setAuthor","error","setError","fetchRandomQuote","response","fetch","ok","Error","data","json","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sunil/Desktop/mdev-dashboard/src/components/quotes.widget.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../styles/quotes.css'; // Include your CSS for styling\n\nconst RandomQuotes = () => {\n    const [quote, setQuote] = useState('');\n    const [author, setAuthor] = useState('');\n    const [error, setError] = useState('');\n\n    const fetchRandomQuote = async () => {\n        try {\n            const response = await fetch('https://api.quotable.io/random');  //calling API\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            const data = await response.json();\n            setQuote(data.content); //setting data\n            setAuthor(data.author);\n        } catch (error) {\n            setError('Failed to fetch quote.');\n        }\n    };\n\n    useEffect(() => {\n        fetchRandomQuote();\n    }, []);\n\n    //fetching when page loads using useEffect\n\n    return (\n        <div className=\"quotes\">\n            <h2>Random Quote</h2>\n            {error && <p className=\"error\">{error}</p>}\n            {quote && (\n                <blockquote>\n                    <p>\"{quote}\"</p>\n                    <footer>- {author}</footer>\n                </blockquote>\n            )}\n        </div>\n    );\n};\n\nexport default RandomQuotes;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMW,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAE;MACjE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCX,QAAQ,CAACU,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;MACxBV,SAAS,CAACQ,IAAI,CAACT,MAAM,CAAC;IAC1B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,QAAQ,CAAC,wBAAwB,CAAC;IACtC;EACJ,CAAC;EAEDX,SAAS,CAAC,MAAM;IACZY,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;;EAEN;;EAEA,oBACIT,OAAA;IAAKiB,SAAS,EAAC,QAAQ;IAAAC,QAAA,gBACnBlB,OAAA;MAAAkB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBf,KAAK,iBAAIP,OAAA;MAAGiB,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEX;IAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzCnB,KAAK,iBACFH,OAAA;MAAAkB,QAAA,gBACIlB,OAAA;QAAAkB,QAAA,GAAG,IAAC,EAACf,KAAK,EAAC,IAAC;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAChBtB,OAAA;QAAAkB,QAAA,GAAQ,IAAE,EAACb,MAAM;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CACf;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACpB,EAAA,CArCID,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAuClB,eAAeA,YAAY;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}